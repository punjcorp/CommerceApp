; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{542518E6-70F9-42FB-9674-55295F4F4021}
AppName=PI-POS
AppVersion=1.0
;AppVerName=PI-POS 1.0
AppPublisher=Consult for IT Solutions
AppPublisherURL=http://consultforit.com
AppSupportURL=http://consultforit.com
AppUpdatesURL=http://consultforit.com
DefaultDirName=D:\repos\inno_setup\PI-POS-INSTALLED

DisableWelcomePage=no
DisableDirPage=no
ChangesEnvironment=yes
SetupLogging=yes

DefaultGroupName=PI-POS
AllowNoIcons=yes
OutputBaseFilename=PI-POS-Setup
Compression=lzma
SolidCompression=yes
OutputDir=D:\repos\inno_setup\dist\

[Files]
;unzip the zipped distribution in dist directory and include all 
;files in root directory of the application.
Source: "D:\repos\inno_setup\installables\64-bit\*"; DestDir: {app}\utils\; Flags: ignoreversion recursesubdirs
Source: "D:\repos\inno_setup\installables\pi_pos_app\*"; DestDir: {app}\pi_pos_app\; Flags: ignoreversion recursesubdirs
Source: "D:\repos\inno_setup\installables\db\*"; DestDir: {app}\tmp\db_schema\; Flags: ignoreversion recursesubdirs
Source: "D:\repos\inno_setup\installables\maven\*"; DestDir: {app}\tmp\maven\; Flags: ignoreversion recursesubdirs
Source: "D:\repos\inno_setup\installables\confs\*"; DestDir: {app}\confs\; Flags: ignoreversion recursesubdirs

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,PI-POS}"; Filename: "http://consultforit.com"
Name: "{group}\{cm:UninstallProgram,PI-POS}"; Filename: "{uninstallexe}"

[Code]
var
  DirPage: TInputDirWizardPage;

function ReverseSlashInPath(Value: string): string;
begin
  Result := ExpandConstant(Value);
  StringChangeEx(Result, '\', '/', True);
end;

function GetDir(Param: String): String;
begin
  Result := DirPage.Values[StrToInt(Param)];
end;

procedure InitializeWizard;
begin
  { create a directory input page }
  DirPage := CreateInputDirPage(
    wpSelectDir, 'Select Destination Locations', 'Please select the locations for PI-POS Package Data files', 'Setup will create the PI-POS data package into the selected folder. To continue, click Next. If you would like to select a different folders, click Browse.', False, '');
  { add directory input page items }
    DirPage.Add('PI-POS Data folder');
  { assign default directories for the items from the previously stored data; if }
  { there are no data stored from the previous installation, use default folders }
  { of your choice }
   DirPage.Values[0] := GetPreviousData('Directory1', ExpandConstant('D:\repos\inno_setup\PI-POS-INSTALLED\'));
end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
  { store chosen directories for the next run of the setup }
  SetPreviousData(PreviousDataKey, 'Directory1', DirPage.Values[0]);
end;


function FileReplaceString(const FileName, SearchString, ReplaceString: string): Boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  MyFile := TStringList.Create;

  try
    result := true;

    try
      MyFile.LoadFromFile(FileName);
      MyText := MyFile.Text;

      { Only save if text has been changed. }
      if StringChangeEx(MyText, SearchString, ReplaceString, True) > 0 then
      begin;
        MyFile.Text := MyText;
        MyFile.SaveToFile(FileName);
      end;
    except
      result := false;
    end;
  finally
    MyFile.Free;
  end;
end;


function ReplaceConf(const TokenFileName: String; const ConfFileName: String):Boolean;
var FileTokens : TArrayOfString;
var TokenEntry: string;
var EqualToIndex: Integer;
var TokenKey: string;
var TokenVal: string;
var I: Integer;
var ExecResult: Integer;
begin
  try
    result := true;
    if LoadStringsFromFile(TokenFileName, FileTokens) then
    begin
        for I := 0 to GetArrayLength(FileTokens) - 1 do
        begin
          TokenEntry := Trim(FileTokens[I]);
          EqualToIndex := Pos('=', TokenEntry);
          TokenKey := Copy(TokenEntry, 0, EqualToIndex-1);
          TokenVal := Copy(TokenEntry, EqualToIndex+1, Length(TokenEntry));
          FileReplaceString(ConfFileName, TokenKey, TokenVal);
        end;
    end;
  except
      result := false;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var ExecResult: Integer;
var SQLFileContent: String;
var logfilepathname, logfilename, newfilepathname: string;
//var tmpMavenOutput : string;
begin

      logfilepathname := ExpandConstant('{log}');
      logfilename := ExtractFileName(logfilepathname);
      newfilepathname := ExpandConstant('{app}\') + logfilename;


     if CurStep = ssPostInstall then
     begin

      FileReplaceString(ExpandConstant('{app}\confs\pi_pos.conf'), 'PI_POS_T_HOME=USER_APP_DIR', 'PI_POS_T_HOME='+ReverseSlashInPath(ExpandConstant('{app}')));

      FileReplaceString(ExpandConstant('{app}\confs\pi_pos.conf'), 'PI_POS_T_MYSQL_BASE_DIR=USER_APP_DIR', 'PI_POS_T_MYSQL_BASE_DIR='+ReverseSlashInPath(ExpandConstant('{app}')));
      
      FileReplaceString(ExpandConstant('{app}\confs\pi_pos.conf'), 'PI_POS_T_MYSQL_DATA_DIR=USER_APP_DATA_DIR', 'PI_POS_T_MYSQL_DATA_DIR='+ReverseSlashInPath(ExpandConstant('{code:GetDir|0}')));
      
      if DirExists(ExpandConstant('{code:GetDir|0}')+'/data/') then
      begin
      end
      else begin
        CreateDir(ExpandConstant('{code:GetDir|0}')+'/data/')
      end;

      ReplaceConf(
           ExpandConstant('{app}\confs\pi_pos.conf'),
           ExpandConstant('{app}\utils\mysql\my.ini')
           );
      
     
  
      // Launch mysql initialize and wait for it to terminate
      Exec(ExpandConstant('{app}\utils\mysql\bin\mysqld.exe'), '--initialize-insecure', '', SW_HIDE,ewWaitUntilTerminated, ExecResult);
      
      Exec(ExpandConstant('{app}\utils\mysql\bin\mysqld.exe'), '--install PI-POS-APP-DB', '', SW_HIDE, ewWaitUntilTerminated, ExecResult);

      if not Exec(ExpandConstant('{sys}\sc.exe'), 'start PI-POS-APP-DB', '', SW_HIDE, ewWaitUntilTerminated, ExecResult) then
      begin
        log('There is some issue while starting PI-POS-APP-DB service');
      end;
      
      Sleep(30000);

      // Initial DB setup for the PI-POS application
      ReplaceConf(
           ExpandConstant('{app}\confs\pi_pos.conf'),
           ExpandConstant('{app}\confs\initial_setup.sql')
           );

      if not LoadStringFromFile(ExpandConstant('{app}\confs\initial_setup.sql'), SQLFileContent) then
      begin
        log('There is some issue while reading initial sql file'+SQLFileContent);
      end;

      if not Exec(ExpandConstant('{app}\utils\mysql\bin\mysql.exe'), '-u root --skip-password -e"'+SQLFileContent+'"', '', SW_SHOW, ewWaitUntilTerminated, ExecResult) then
      begin
        log('There is some issue while perfoming initial setup for MySQL schema');
      end;

      { The database schema migration starts now}

      ReplaceConf(
           ExpandConstant('{app}\confs\pi_pos.conf'),
           ExpandConstant('{app}\tmp\db_schema\flyway_generic.properties')
           );
      //tmpMavenOutput := ExpandConstant('{app}\maven.txt');
      if not Exec(ExpandConstant('{app}\tmp\maven\bin\mvn.cmd'), '-s '+ExpandConstant('{app}\tmp\maven\conf\settings.xml')+' -D"flyway.configFiles"=flyway_generic.properties initialize flyway:migrate', ExpandConstant('{app}\tmp\db_schema\'), SW_SHOW, ewWaitUntilTerminated, ExecResult) then
      begin
        MsgBox(SysErrorMessage(ExecResult), mbError, MB_OK);
        log('There is some issue while migration MySQL schema as part of flyway task'+ IntToStr(ExecResult));
      end;



      { The application setup starts now}

      ReplaceConf(
           ExpandConstant('{app}\confs\pi_pos.conf'),
           ExpandConstant('{app}\pi_pos_app\config\application.properties')
           );
      
      ReplaceConf(
           ExpandConstant('{app}\confs\pi_pos.conf'),
           ExpandConstant('{app}\pi_pos_app\bin\run.bat')
           );

      ReplaceConf(
           ExpandConstant('{app}\confs\pi_pos.conf'),
           ExpandConstant('{app}\pi_pos_app\bin\pi_pos_app.xml')
           );

      Exec(ExpandConstant('{app}\pi_pos_app\bin\pi_pos_app.exe'), 'install', '', SW_HIDE,ewWaitUntilTerminated, ExecResult);

      DelTree(ExpandConstant('{app}\tmp\'), True, True, True);
      DelTree(ExpandConstant('{app}\confs\'), True, True, True);
      

      if not Exec(ExpandConstant('{sys}\sc.exe'), 'start PI-POS-APP', '', SW_HIDE, ewWaitUntilTerminated, ExecResult) then
      begin
        log('There is some issue while starting PI-POS-APP service');
      end;

    end;

    if CurStep = ssDone then
    begin
      FileCopy(logfilepathname, newfilepathname, false);
    end;

end;


[UninstallRun]
Filename: {sys}\sc.exe; Parameters: "stop PI-POS-APP" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "delete PI-POS-APP" ; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "stop PI-POS-APP-DB" ; Flags: runhidden waituntilterminated
Filename: {sys}\sc.exe; Parameters: "delete PI-POS-APP-DB" ; Flags: runhidden
[UninstallDelete]
Type: files; Name: "{app}\*";
Type:filesandordirs ;Name: "{app}" 
